logging.level.org.springframework.core.env=TRACE

spring.devtools.restart.enabled=false

spring.application.name=SandWich
server.port=${SERVER_PORT:8080}
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.jackson.time-zone=Asia/Seoul
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
spring.jpa.properties.hibernate.jdbc_time_zone=UTC

# RDS
spring.datasource.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# JPA ??
spring.jpa.open-in-view=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Redis
spring.data.redis.host=${SPRING_REDIS_HOST}
spring.data.redis.port=${SPRING_REDIS_PORT}

# Log
logging.level.com.sandwich=DEBUG
logging.level.org.springframework.mail=DEBUG
debug=true
logging.level.com.sandwich.SandWich.auth.service=DEBUG

# OAuth2 GitHub client
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=read:user,user:email
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.github.client-name=GitHub

# GitHub server
spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=login

# OAuth2 Google client
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# AWS
cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID}
cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}
cloud.aws.stack.auto=false

# S3
cloud.aws.region.static=${AWS_REGION}

# bucket name
cloud.aws.s3.bucket=${S3_BUCKET_NAME}

# user Deploy s3
cloud.aws.s3.deploy.bucket=${S3_DEPLOY_BUCKET_NAME}

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Jasypt (GitHub Token)
jasypt.encryptor.password=${JASYPT_ENCRYPTOR_PASSWORD}

# CloudFront domain
cloudfront.domain=${CLOUDFRONT_DOMAIN}

# HikariCP ??? ? ??
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=60000
spring.datasource.hikari.connection-timeout=30000

# file upload
app.files.storage=s3
app.files.s3.bucket=${S3_BUCKET_NAME}
app.files.s3.region=${AWS_REGION}
app.files.local.base-dir=/data/sandwich-files

# FCM on/off
push.fcm.enabled=true

# service account JSON path
firebase.credentials.path=${FIREBASE_CREDENTIALS_PATH:/app/creds/firebase-service-account.json}

# web deeplink base-url
app.web.base-url=${APP_BASE_URL}

notifications.push.quiet-hours-enabled=true
notifications.push.quiet-hours-start=00:00
notifications.push.quiet-hours-end=23:59

app.system.user-id=1
ops.system-notify.enabled=true

# test toggle on/off
push.skip.online-gate=false
push.debounce.seconds=30
push.quiet-hours.enabled=true
push.web.fallback-notification=false 

spring.jackson.serialization.write-dates-as-timestamps=false
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.properties.hibernate.format_sql=true

# AI code-grader-request
grader.enabled=true
grader.endpoint=http://localhost:9090/v1/grade-requests
grader.hmacSecret=local-secret
grader.keyId=local
grader.callbackUrl=http://localhost:8080/internal/ai/grade-callback
grader.maxRetries=3
grader.baseBackoffMillis=300
grader.callback.enabled=true
grader.clockSkewSeconds=300

# reward
reward.enabled=true
reward.applyCredits=true
reward.autoPublish.enabled=true
reward.autoPublish.top=10000,5000,3000
reward.autoPublish.participant=500
reward.autoPublish.delaySec=5
reward.autoPublish.dryRun=false
reward.autoPublishOnEnd=true
reward.rule.top=10000,5000,3000
reward.rule.participant=500

# scheduler
challenge.autoNotify.enabled=true
challenge.scheduler.enabled=true
challenge.scheduler.fixedDelay=15000
challenge.scheduler.zoneId=Asia/Seoul

# Rate Limit
ratelimit.enabled=true
ratelimit.submission.perMin=3
ratelimit.submission.perDay=50
ratelimit.vote.perMin=10
ratelimit.vote.perDay=200
server.forward-headers-strategy=framework

# reCAPTCHA
captcha.enabled=true
captcha.testBypassToken=dev-ok

# reCAPTCHA v3
captcha.secret=${CAPTCHA_V3_SECRET}
captcha.threshold=0.5
captcha.paths=/api/auth/signup

# reCAPTCHA v2 (email send)
captcha.v2.enabled=true
captcha.v2.secret=${CAPTCHA_V2_SECRET}


# Screenshot guard
app.screenshot.max-count=200
app.screenshot.timeout-ms=15000

# SMTP
spring.mail.host=smtp.naver.com
spring.mail.port=587
spring.mail.username=${MAIL_USER}
spring.mail.password=${MAIL_PASS}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.ssl.enable=false
spring.mail.properties.mail.debug=true

# MFA Feature Flag
mfa.enabled=true
mfa.block-otp-apis=false

# AI
internal.apiKeys=${INTERNAL_API_KEYS}
ai.api.key=${AI_API_KEY}
ai.api.base=${AI_API_BASE:https://api.dnutzs.org}

# Actuator + Prometheus
management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.server.port=9090
management.server.address=0.0.0.0
management.endpoint.health.probes.enabled=true

# AES
aes.key=${SANDWICH_AES_KEY}
