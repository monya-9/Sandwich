services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sandwich_app
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - redis
    env_file: .env
    environment:
      JAVA_TOOL_OPTIONS: "-Duser.timezone=UTC"
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SANDWICH_USER_AWS_ACCESS_KEY_ID: ${SANDWICH_USER_AWS_ACCESS_KEY_ID}
      SANDWICH_USER_AWS_SECRET_ACCESS_KEY: ${SANDWICH_USER_AWS_SECRET_ACCESS_KEY}
      AWS_ACCESS_KEY_ID: ${SANDWICH_USER_AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${SANDWICH_USER_AWS_SECRET_ACCESS_KEY}
      PUSH_FCM_ENABLED: "true"
      FIREBASE_CREDENTIALS_PATH: /app/creds/firebase-service-account.json
      FIREBASE_CREDENTIALS_JSON_B64: ${FIREBASE_CREDENTIALS_JSON_B64}
      APP_WEB_BASE_URL: http://localhost
      MFA_ENABLED: "true"
      MFA_BLOCK_OTP_APIS: "false"
    entrypoint:
      - /bin/sh
      - -lc
      - |
        set -e
        mkdir -p /app/creds
        if [ -n "$${FIREBASE_CREDENTIALS_JSON_B64}" ]; then
          echo "$${FIREBASE_CREDENTIALS_JSON_B64}" | base64 -d > /app/creds/firebase-service-account.json
        fi
        exec java -jar app.jar
#    volumes:
#      - ./creds:/app/creds:ro
    networks: [sandwich-net]

  redis:
    image: redis:7
    container_name: sandwich_redis
    restart: always
    ports:
      - "6379:6379"
    networks: [sandwich-net]

  nginx:
    build:
      context: ./nginx
    container_name: sandwich_nginx
    ports: ["80:80"]
    volumes:
      - ../front/build:/app:ro
      - ./public:/var/www/public:ro
    depends_on: [app]
    environment:
      FIREBASE_VAPID_KEY: ${FIREBASE_VAPID_KEY}
    command:
      - /bin/sh
      - -lc
      - |
        set -e
        f=/var/www/public/ws-test.html
        if [ -f "$$f" ]; then
          sed -i 's|$${FIREBASE_VAPID_KEY}|'"$${FIREBASE_VAPID_KEY}"'|g' "$$f"
        fi
        exec nginx -g 'daemon off;'
    networks: [sandwich-net]

  prometheus:
    build:
      context: .
      dockerfile: Dockerfile.prom
    container_name: sandwich_prometheus
    restart: always
    depends_on:
      - app
    ports:
      - "9091:9090"
    networks: [sandwich-net]

  grafana:
    image: grafana/grafana:latest
    container_name: sandwich_grafana
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
    #ports: ["3300:3000"]
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: http://localhost/grafana/
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    networks: [sandwich-net]

volumes:
  pgdata: {}
  grafana-data: {}

networks:
  sandwich-net:
    external: false   # 외부 네트워크 쓸 거면 true, 아니면 false(또는 아예 생략)
